// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module jacobi2d_kernel_store40 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        m_axi_var_output_0_2_V_AWVALID,
        m_axi_var_output_0_2_V_AWREADY,
        m_axi_var_output_0_2_V_AWADDR,
        m_axi_var_output_0_2_V_AWID,
        m_axi_var_output_0_2_V_AWLEN,
        m_axi_var_output_0_2_V_AWSIZE,
        m_axi_var_output_0_2_V_AWBURST,
        m_axi_var_output_0_2_V_AWLOCK,
        m_axi_var_output_0_2_V_AWCACHE,
        m_axi_var_output_0_2_V_AWPROT,
        m_axi_var_output_0_2_V_AWQOS,
        m_axi_var_output_0_2_V_AWREGION,
        m_axi_var_output_0_2_V_AWUSER,
        m_axi_var_output_0_2_V_WVALID,
        m_axi_var_output_0_2_V_WREADY,
        m_axi_var_output_0_2_V_WDATA,
        m_axi_var_output_0_2_V_WSTRB,
        m_axi_var_output_0_2_V_WLAST,
        m_axi_var_output_0_2_V_WID,
        m_axi_var_output_0_2_V_WUSER,
        m_axi_var_output_0_2_V_ARVALID,
        m_axi_var_output_0_2_V_ARREADY,
        m_axi_var_output_0_2_V_ARADDR,
        m_axi_var_output_0_2_V_ARID,
        m_axi_var_output_0_2_V_ARLEN,
        m_axi_var_output_0_2_V_ARSIZE,
        m_axi_var_output_0_2_V_ARBURST,
        m_axi_var_output_0_2_V_ARLOCK,
        m_axi_var_output_0_2_V_ARCACHE,
        m_axi_var_output_0_2_V_ARPROT,
        m_axi_var_output_0_2_V_ARQOS,
        m_axi_var_output_0_2_V_ARREGION,
        m_axi_var_output_0_2_V_ARUSER,
        m_axi_var_output_0_2_V_RVALID,
        m_axi_var_output_0_2_V_RREADY,
        m_axi_var_output_0_2_V_RDATA,
        m_axi_var_output_0_2_V_RLAST,
        m_axi_var_output_0_2_V_RID,
        m_axi_var_output_0_2_V_RUSER,
        m_axi_var_output_0_2_V_RRESP,
        m_axi_var_output_0_2_V_BVALID,
        m_axi_var_output_0_2_V_BREADY,
        m_axi_var_output_0_2_V_BRESP,
        m_axi_var_output_0_2_V_BID,
        m_axi_var_output_0_2_V_BUSER,
        var_output_0_2_V_offset_dout,
        var_output_0_2_V_offset_empty_n,
        var_output_0_2_V_offset_read,
        output_stream_0_2_V_V_dout,
        output_stream_0_2_V_V_empty_n,
        output_stream_0_2_V_V_read,
        coalesced_data_num_dout,
        coalesced_data_num_empty_n,
        coalesced_data_num_read
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state129 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   m_axi_var_output_0_2_V_AWVALID;
input   m_axi_var_output_0_2_V_AWREADY;
output  [31:0] m_axi_var_output_0_2_V_AWADDR;
output  [0:0] m_axi_var_output_0_2_V_AWID;
output  [31:0] m_axi_var_output_0_2_V_AWLEN;
output  [2:0] m_axi_var_output_0_2_V_AWSIZE;
output  [1:0] m_axi_var_output_0_2_V_AWBURST;
output  [1:0] m_axi_var_output_0_2_V_AWLOCK;
output  [3:0] m_axi_var_output_0_2_V_AWCACHE;
output  [2:0] m_axi_var_output_0_2_V_AWPROT;
output  [3:0] m_axi_var_output_0_2_V_AWQOS;
output  [3:0] m_axi_var_output_0_2_V_AWREGION;
output  [0:0] m_axi_var_output_0_2_V_AWUSER;
output   m_axi_var_output_0_2_V_WVALID;
input   m_axi_var_output_0_2_V_WREADY;
output  [511:0] m_axi_var_output_0_2_V_WDATA;
output  [63:0] m_axi_var_output_0_2_V_WSTRB;
output   m_axi_var_output_0_2_V_WLAST;
output  [0:0] m_axi_var_output_0_2_V_WID;
output  [0:0] m_axi_var_output_0_2_V_WUSER;
output   m_axi_var_output_0_2_V_ARVALID;
input   m_axi_var_output_0_2_V_ARREADY;
output  [31:0] m_axi_var_output_0_2_V_ARADDR;
output  [0:0] m_axi_var_output_0_2_V_ARID;
output  [31:0] m_axi_var_output_0_2_V_ARLEN;
output  [2:0] m_axi_var_output_0_2_V_ARSIZE;
output  [1:0] m_axi_var_output_0_2_V_ARBURST;
output  [1:0] m_axi_var_output_0_2_V_ARLOCK;
output  [3:0] m_axi_var_output_0_2_V_ARCACHE;
output  [2:0] m_axi_var_output_0_2_V_ARPROT;
output  [3:0] m_axi_var_output_0_2_V_ARQOS;
output  [3:0] m_axi_var_output_0_2_V_ARREGION;
output  [0:0] m_axi_var_output_0_2_V_ARUSER;
input   m_axi_var_output_0_2_V_RVALID;
output   m_axi_var_output_0_2_V_RREADY;
input  [511:0] m_axi_var_output_0_2_V_RDATA;
input   m_axi_var_output_0_2_V_RLAST;
input  [0:0] m_axi_var_output_0_2_V_RID;
input  [0:0] m_axi_var_output_0_2_V_RUSER;
input  [1:0] m_axi_var_output_0_2_V_RRESP;
input   m_axi_var_output_0_2_V_BVALID;
output   m_axi_var_output_0_2_V_BREADY;
input  [1:0] m_axi_var_output_0_2_V_BRESP;
input  [0:0] m_axi_var_output_0_2_V_BID;
input  [0:0] m_axi_var_output_0_2_V_BUSER;
input  [31:0] var_output_0_2_V_offset_dout;
input   var_output_0_2_V_offset_empty_n;
output   var_output_0_2_V_offset_read;
input  [511:0] output_stream_0_2_V_V_dout;
input   output_stream_0_2_V_V_empty_n;
output   output_stream_0_2_V_V_read;
input  [63:0] coalesced_data_num_dout;
input   coalesced_data_num_empty_n;
output   coalesced_data_num_read;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg m_axi_var_output_0_2_V_AWVALID;
reg m_axi_var_output_0_2_V_WVALID;
reg m_axi_var_output_0_2_V_BREADY;
reg var_output_0_2_V_offset_read;
reg output_stream_0_2_V_V_read;
reg coalesced_data_num_read;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    var_output_0_2_V_blk_n_AW;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] tmp_2_reg_231;
reg    var_output_0_2_V_blk_n_W;
reg    ap_enable_reg_pp0_iter2;
reg   [0:0] tmp_2_reg_231_pp0_iter1_reg;
reg    var_output_0_2_V_blk_n_B;
reg    ap_enable_reg_pp0_iter126;
reg   [0:0] tmp_2_reg_231_pp0_iter125_reg;
reg    var_output_0_2_V_offset_blk_n;
reg    coalesced_data_num_blk_n;
wire   [31:0] tmp_fu_146_p1;
reg   [31:0] tmp_reg_218;
reg    ap_block_state1;
wire   [32:0] sext_cast_i_fu_160_p1;
reg   [32:0] sext_cast_i_reg_223;
wire   [0:0] tmp_2_nbreadreq_fu_116_p3;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
reg    ap_sig_ioackin_m_axi_var_output_0_2_V_AWREADY;
reg    ap_block_state3_io;
wire    ap_block_state4_pp0_stage0_iter2;
reg    ap_sig_ioackin_m_axi_var_output_0_2_V_WREADY;
reg    ap_block_state4_io;
wire    ap_block_state5_pp0_stage0_iter3;
wire    ap_block_state6_pp0_stage0_iter4;
wire    ap_block_state7_pp0_stage0_iter5;
wire    ap_block_state8_pp0_stage0_iter6;
wire    ap_block_state9_pp0_stage0_iter7;
wire    ap_block_state10_pp0_stage0_iter8;
wire    ap_block_state11_pp0_stage0_iter9;
wire    ap_block_state12_pp0_stage0_iter10;
wire    ap_block_state13_pp0_stage0_iter11;
wire    ap_block_state14_pp0_stage0_iter12;
wire    ap_block_state15_pp0_stage0_iter13;
wire    ap_block_state16_pp0_stage0_iter14;
wire    ap_block_state17_pp0_stage0_iter15;
wire    ap_block_state18_pp0_stage0_iter16;
wire    ap_block_state19_pp0_stage0_iter17;
wire    ap_block_state20_pp0_stage0_iter18;
wire    ap_block_state21_pp0_stage0_iter19;
wire    ap_block_state22_pp0_stage0_iter20;
wire    ap_block_state23_pp0_stage0_iter21;
wire    ap_block_state24_pp0_stage0_iter22;
wire    ap_block_state25_pp0_stage0_iter23;
wire    ap_block_state26_pp0_stage0_iter24;
wire    ap_block_state27_pp0_stage0_iter25;
wire    ap_block_state28_pp0_stage0_iter26;
wire    ap_block_state29_pp0_stage0_iter27;
wire    ap_block_state30_pp0_stage0_iter28;
wire    ap_block_state31_pp0_stage0_iter29;
wire    ap_block_state32_pp0_stage0_iter30;
wire    ap_block_state33_pp0_stage0_iter31;
wire    ap_block_state34_pp0_stage0_iter32;
wire    ap_block_state35_pp0_stage0_iter33;
wire    ap_block_state36_pp0_stage0_iter34;
wire    ap_block_state37_pp0_stage0_iter35;
wire    ap_block_state38_pp0_stage0_iter36;
wire    ap_block_state39_pp0_stage0_iter37;
wire    ap_block_state40_pp0_stage0_iter38;
wire    ap_block_state41_pp0_stage0_iter39;
wire    ap_block_state42_pp0_stage0_iter40;
wire    ap_block_state43_pp0_stage0_iter41;
wire    ap_block_state44_pp0_stage0_iter42;
wire    ap_block_state45_pp0_stage0_iter43;
wire    ap_block_state46_pp0_stage0_iter44;
wire    ap_block_state47_pp0_stage0_iter45;
wire    ap_block_state48_pp0_stage0_iter46;
wire    ap_block_state49_pp0_stage0_iter47;
wire    ap_block_state50_pp0_stage0_iter48;
wire    ap_block_state51_pp0_stage0_iter49;
wire    ap_block_state52_pp0_stage0_iter50;
wire    ap_block_state53_pp0_stage0_iter51;
wire    ap_block_state54_pp0_stage0_iter52;
wire    ap_block_state55_pp0_stage0_iter53;
wire    ap_block_state56_pp0_stage0_iter54;
wire    ap_block_state57_pp0_stage0_iter55;
wire    ap_block_state58_pp0_stage0_iter56;
wire    ap_block_state59_pp0_stage0_iter57;
wire    ap_block_state60_pp0_stage0_iter58;
wire    ap_block_state61_pp0_stage0_iter59;
wire    ap_block_state62_pp0_stage0_iter60;
wire    ap_block_state63_pp0_stage0_iter61;
wire    ap_block_state64_pp0_stage0_iter62;
wire    ap_block_state65_pp0_stage0_iter63;
wire    ap_block_state66_pp0_stage0_iter64;
wire    ap_block_state67_pp0_stage0_iter65;
wire    ap_block_state68_pp0_stage0_iter66;
wire    ap_block_state69_pp0_stage0_iter67;
wire    ap_block_state70_pp0_stage0_iter68;
wire    ap_block_state71_pp0_stage0_iter69;
wire    ap_block_state72_pp0_stage0_iter70;
wire    ap_block_state73_pp0_stage0_iter71;
wire    ap_block_state74_pp0_stage0_iter72;
wire    ap_block_state75_pp0_stage0_iter73;
wire    ap_block_state76_pp0_stage0_iter74;
wire    ap_block_state77_pp0_stage0_iter75;
wire    ap_block_state78_pp0_stage0_iter76;
wire    ap_block_state79_pp0_stage0_iter77;
wire    ap_block_state80_pp0_stage0_iter78;
wire    ap_block_state81_pp0_stage0_iter79;
wire    ap_block_state82_pp0_stage0_iter80;
wire    ap_block_state83_pp0_stage0_iter81;
wire    ap_block_state84_pp0_stage0_iter82;
wire    ap_block_state85_pp0_stage0_iter83;
wire    ap_block_state86_pp0_stage0_iter84;
wire    ap_block_state87_pp0_stage0_iter85;
wire    ap_block_state88_pp0_stage0_iter86;
wire    ap_block_state89_pp0_stage0_iter87;
wire    ap_block_state90_pp0_stage0_iter88;
wire    ap_block_state91_pp0_stage0_iter89;
wire    ap_block_state92_pp0_stage0_iter90;
wire    ap_block_state93_pp0_stage0_iter91;
wire    ap_block_state94_pp0_stage0_iter92;
wire    ap_block_state95_pp0_stage0_iter93;
wire    ap_block_state96_pp0_stage0_iter94;
wire    ap_block_state97_pp0_stage0_iter95;
wire    ap_block_state98_pp0_stage0_iter96;
wire    ap_block_state99_pp0_stage0_iter97;
wire    ap_block_state100_pp0_stage0_iter98;
wire    ap_block_state101_pp0_stage0_iter99;
wire    ap_block_state102_pp0_stage0_iter100;
wire    ap_block_state103_pp0_stage0_iter101;
wire    ap_block_state104_pp0_stage0_iter102;
wire    ap_block_state105_pp0_stage0_iter103;
wire    ap_block_state106_pp0_stage0_iter104;
wire    ap_block_state107_pp0_stage0_iter105;
wire    ap_block_state108_pp0_stage0_iter106;
wire    ap_block_state109_pp0_stage0_iter107;
wire    ap_block_state110_pp0_stage0_iter108;
wire    ap_block_state111_pp0_stage0_iter109;
wire    ap_block_state112_pp0_stage0_iter110;
wire    ap_block_state113_pp0_stage0_iter111;
wire    ap_block_state114_pp0_stage0_iter112;
wire    ap_block_state115_pp0_stage0_iter113;
wire    ap_block_state116_pp0_stage0_iter114;
wire    ap_block_state117_pp0_stage0_iter115;
wire    ap_block_state118_pp0_stage0_iter116;
wire    ap_block_state119_pp0_stage0_iter117;
wire    ap_block_state120_pp0_stage0_iter118;
wire    ap_block_state121_pp0_stage0_iter119;
wire    ap_block_state122_pp0_stage0_iter120;
wire    ap_block_state123_pp0_stage0_iter121;
wire    ap_block_state124_pp0_stage0_iter122;
wire    ap_block_state125_pp0_stage0_iter123;
wire    ap_block_state126_pp0_stage0_iter124;
wire    ap_block_state127_pp0_stage0_iter125;
reg    ap_block_state128_pp0_stage0_iter126;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] tmp_i_i_i_fu_172_p2;
reg   [0:0] tmp_2_reg_231_pp0_iter2_reg;
reg   [0:0] tmp_2_reg_231_pp0_iter3_reg;
reg   [0:0] tmp_2_reg_231_pp0_iter4_reg;
reg   [0:0] tmp_2_reg_231_pp0_iter5_reg;
reg   [0:0] tmp_2_reg_231_pp0_iter6_reg;
reg   [0:0] tmp_2_reg_231_pp0_iter7_reg;
reg   [0:0] tmp_2_reg_231_pp0_iter8_reg;
reg   [0:0] tmp_2_reg_231_pp0_iter9_reg;
reg   [0:0] tmp_2_reg_231_pp0_iter10_reg;
reg   [0:0] tmp_2_reg_231_pp0_iter11_reg;
reg   [0:0] tmp_2_reg_231_pp0_iter12_reg;
reg   [0:0] tmp_2_reg_231_pp0_iter13_reg;
reg   [0:0] tmp_2_reg_231_pp0_iter14_reg;
reg   [0:0] tmp_2_reg_231_pp0_iter15_reg;
reg   [0:0] tmp_2_reg_231_pp0_iter16_reg;
reg   [0:0] tmp_2_reg_231_pp0_iter17_reg;
reg   [0:0] tmp_2_reg_231_pp0_iter18_reg;
reg   [0:0] tmp_2_reg_231_pp0_iter19_reg;
reg   [0:0] tmp_2_reg_231_pp0_iter20_reg;
reg   [0:0] tmp_2_reg_231_pp0_iter21_reg;
reg   [0:0] tmp_2_reg_231_pp0_iter22_reg;
reg   [0:0] tmp_2_reg_231_pp0_iter23_reg;
reg   [0:0] tmp_2_reg_231_pp0_iter24_reg;
reg   [0:0] tmp_2_reg_231_pp0_iter25_reg;
reg   [0:0] tmp_2_reg_231_pp0_iter26_reg;
reg   [0:0] tmp_2_reg_231_pp0_iter27_reg;
reg   [0:0] tmp_2_reg_231_pp0_iter28_reg;
reg   [0:0] tmp_2_reg_231_pp0_iter29_reg;
reg   [0:0] tmp_2_reg_231_pp0_iter30_reg;
reg   [0:0] tmp_2_reg_231_pp0_iter31_reg;
reg   [0:0] tmp_2_reg_231_pp0_iter32_reg;
reg   [0:0] tmp_2_reg_231_pp0_iter33_reg;
reg   [0:0] tmp_2_reg_231_pp0_iter34_reg;
reg   [0:0] tmp_2_reg_231_pp0_iter35_reg;
reg   [0:0] tmp_2_reg_231_pp0_iter36_reg;
reg   [0:0] tmp_2_reg_231_pp0_iter37_reg;
reg   [0:0] tmp_2_reg_231_pp0_iter38_reg;
reg   [0:0] tmp_2_reg_231_pp0_iter39_reg;
reg   [0:0] tmp_2_reg_231_pp0_iter40_reg;
reg   [0:0] tmp_2_reg_231_pp0_iter41_reg;
reg   [0:0] tmp_2_reg_231_pp0_iter42_reg;
reg   [0:0] tmp_2_reg_231_pp0_iter43_reg;
reg   [0:0] tmp_2_reg_231_pp0_iter44_reg;
reg   [0:0] tmp_2_reg_231_pp0_iter45_reg;
reg   [0:0] tmp_2_reg_231_pp0_iter46_reg;
reg   [0:0] tmp_2_reg_231_pp0_iter47_reg;
reg   [0:0] tmp_2_reg_231_pp0_iter48_reg;
reg   [0:0] tmp_2_reg_231_pp0_iter49_reg;
reg   [0:0] tmp_2_reg_231_pp0_iter50_reg;
reg   [0:0] tmp_2_reg_231_pp0_iter51_reg;
reg   [0:0] tmp_2_reg_231_pp0_iter52_reg;
reg   [0:0] tmp_2_reg_231_pp0_iter53_reg;
reg   [0:0] tmp_2_reg_231_pp0_iter54_reg;
reg   [0:0] tmp_2_reg_231_pp0_iter55_reg;
reg   [0:0] tmp_2_reg_231_pp0_iter56_reg;
reg   [0:0] tmp_2_reg_231_pp0_iter57_reg;
reg   [0:0] tmp_2_reg_231_pp0_iter58_reg;
reg   [0:0] tmp_2_reg_231_pp0_iter59_reg;
reg   [0:0] tmp_2_reg_231_pp0_iter60_reg;
reg   [0:0] tmp_2_reg_231_pp0_iter61_reg;
reg   [0:0] tmp_2_reg_231_pp0_iter62_reg;
reg   [0:0] tmp_2_reg_231_pp0_iter63_reg;
reg   [0:0] tmp_2_reg_231_pp0_iter64_reg;
reg   [0:0] tmp_2_reg_231_pp0_iter65_reg;
reg   [0:0] tmp_2_reg_231_pp0_iter66_reg;
reg   [0:0] tmp_2_reg_231_pp0_iter67_reg;
reg   [0:0] tmp_2_reg_231_pp0_iter68_reg;
reg   [0:0] tmp_2_reg_231_pp0_iter69_reg;
reg   [0:0] tmp_2_reg_231_pp0_iter70_reg;
reg   [0:0] tmp_2_reg_231_pp0_iter71_reg;
reg   [0:0] tmp_2_reg_231_pp0_iter72_reg;
reg   [0:0] tmp_2_reg_231_pp0_iter73_reg;
reg   [0:0] tmp_2_reg_231_pp0_iter74_reg;
reg   [0:0] tmp_2_reg_231_pp0_iter75_reg;
reg   [0:0] tmp_2_reg_231_pp0_iter76_reg;
reg   [0:0] tmp_2_reg_231_pp0_iter77_reg;
reg   [0:0] tmp_2_reg_231_pp0_iter78_reg;
reg   [0:0] tmp_2_reg_231_pp0_iter79_reg;
reg   [0:0] tmp_2_reg_231_pp0_iter80_reg;
reg   [0:0] tmp_2_reg_231_pp0_iter81_reg;
reg   [0:0] tmp_2_reg_231_pp0_iter82_reg;
reg   [0:0] tmp_2_reg_231_pp0_iter83_reg;
reg   [0:0] tmp_2_reg_231_pp0_iter84_reg;
reg   [0:0] tmp_2_reg_231_pp0_iter85_reg;
reg   [0:0] tmp_2_reg_231_pp0_iter86_reg;
reg   [0:0] tmp_2_reg_231_pp0_iter87_reg;
reg   [0:0] tmp_2_reg_231_pp0_iter88_reg;
reg   [0:0] tmp_2_reg_231_pp0_iter89_reg;
reg   [0:0] tmp_2_reg_231_pp0_iter90_reg;
reg   [0:0] tmp_2_reg_231_pp0_iter91_reg;
reg   [0:0] tmp_2_reg_231_pp0_iter92_reg;
reg   [0:0] tmp_2_reg_231_pp0_iter93_reg;
reg   [0:0] tmp_2_reg_231_pp0_iter94_reg;
reg   [0:0] tmp_2_reg_231_pp0_iter95_reg;
reg   [0:0] tmp_2_reg_231_pp0_iter96_reg;
reg   [0:0] tmp_2_reg_231_pp0_iter97_reg;
reg   [0:0] tmp_2_reg_231_pp0_iter98_reg;
reg   [0:0] tmp_2_reg_231_pp0_iter99_reg;
reg   [0:0] tmp_2_reg_231_pp0_iter100_reg;
reg   [0:0] tmp_2_reg_231_pp0_iter101_reg;
reg   [0:0] tmp_2_reg_231_pp0_iter102_reg;
reg   [0:0] tmp_2_reg_231_pp0_iter103_reg;
reg   [0:0] tmp_2_reg_231_pp0_iter104_reg;
reg   [0:0] tmp_2_reg_231_pp0_iter105_reg;
reg   [0:0] tmp_2_reg_231_pp0_iter106_reg;
reg   [0:0] tmp_2_reg_231_pp0_iter107_reg;
reg   [0:0] tmp_2_reg_231_pp0_iter108_reg;
reg   [0:0] tmp_2_reg_231_pp0_iter109_reg;
reg   [0:0] tmp_2_reg_231_pp0_iter110_reg;
reg   [0:0] tmp_2_reg_231_pp0_iter111_reg;
reg   [0:0] tmp_2_reg_231_pp0_iter112_reg;
reg   [0:0] tmp_2_reg_231_pp0_iter113_reg;
reg   [0:0] tmp_2_reg_231_pp0_iter114_reg;
reg   [0:0] tmp_2_reg_231_pp0_iter115_reg;
reg   [0:0] tmp_2_reg_231_pp0_iter116_reg;
reg   [0:0] tmp_2_reg_231_pp0_iter117_reg;
reg   [0:0] tmp_2_reg_231_pp0_iter118_reg;
reg   [0:0] tmp_2_reg_231_pp0_iter119_reg;
reg   [0:0] tmp_2_reg_231_pp0_iter120_reg;
reg   [0:0] tmp_2_reg_231_pp0_iter121_reg;
reg   [0:0] tmp_2_reg_231_pp0_iter122_reg;
reg   [0:0] tmp_2_reg_231_pp0_iter123_reg;
reg   [0:0] tmp_2_reg_231_pp0_iter124_reg;
reg   [511:0] tmp_V_reg_235;
reg   [511:0] tmp_V_reg_235_pp0_iter1_reg;
wire   [32:0] sum_i_fu_185_p2;
reg   [32:0] sum_i_reg_240;
reg    ap_enable_reg_pp0_iter0;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter10;
reg    ap_enable_reg_pp0_iter11;
reg    ap_enable_reg_pp0_iter12;
reg    ap_enable_reg_pp0_iter13;
reg    ap_enable_reg_pp0_iter14;
reg    ap_enable_reg_pp0_iter15;
reg    ap_enable_reg_pp0_iter16;
reg    ap_enable_reg_pp0_iter17;
reg    ap_enable_reg_pp0_iter18;
reg    ap_enable_reg_pp0_iter19;
reg    ap_enable_reg_pp0_iter20;
reg    ap_enable_reg_pp0_iter21;
reg    ap_enable_reg_pp0_iter22;
reg    ap_enable_reg_pp0_iter23;
reg    ap_enable_reg_pp0_iter24;
reg    ap_enable_reg_pp0_iter25;
reg    ap_enable_reg_pp0_iter26;
reg    ap_enable_reg_pp0_iter27;
reg    ap_enable_reg_pp0_iter28;
reg    ap_enable_reg_pp0_iter29;
reg    ap_enable_reg_pp0_iter30;
reg    ap_enable_reg_pp0_iter31;
reg    ap_enable_reg_pp0_iter32;
reg    ap_enable_reg_pp0_iter33;
reg    ap_enable_reg_pp0_iter34;
reg    ap_enable_reg_pp0_iter35;
reg    ap_enable_reg_pp0_iter36;
reg    ap_enable_reg_pp0_iter37;
reg    ap_enable_reg_pp0_iter38;
reg    ap_enable_reg_pp0_iter39;
reg    ap_enable_reg_pp0_iter40;
reg    ap_enable_reg_pp0_iter41;
reg    ap_enable_reg_pp0_iter42;
reg    ap_enable_reg_pp0_iter43;
reg    ap_enable_reg_pp0_iter44;
reg    ap_enable_reg_pp0_iter45;
reg    ap_enable_reg_pp0_iter46;
reg    ap_enable_reg_pp0_iter47;
reg    ap_enable_reg_pp0_iter48;
reg    ap_enable_reg_pp0_iter49;
reg    ap_enable_reg_pp0_iter50;
reg    ap_enable_reg_pp0_iter51;
reg    ap_enable_reg_pp0_iter52;
reg    ap_enable_reg_pp0_iter53;
reg    ap_enable_reg_pp0_iter54;
reg    ap_enable_reg_pp0_iter55;
reg    ap_enable_reg_pp0_iter56;
reg    ap_enable_reg_pp0_iter57;
reg    ap_enable_reg_pp0_iter58;
reg    ap_enable_reg_pp0_iter59;
reg    ap_enable_reg_pp0_iter60;
reg    ap_enable_reg_pp0_iter61;
reg    ap_enable_reg_pp0_iter62;
reg    ap_enable_reg_pp0_iter63;
reg    ap_enable_reg_pp0_iter64;
reg    ap_enable_reg_pp0_iter65;
reg    ap_enable_reg_pp0_iter66;
reg    ap_enable_reg_pp0_iter67;
reg    ap_enable_reg_pp0_iter68;
reg    ap_enable_reg_pp0_iter69;
reg    ap_enable_reg_pp0_iter70;
reg    ap_enable_reg_pp0_iter71;
reg    ap_enable_reg_pp0_iter72;
reg    ap_enable_reg_pp0_iter73;
reg    ap_enable_reg_pp0_iter74;
reg    ap_enable_reg_pp0_iter75;
reg    ap_enable_reg_pp0_iter76;
reg    ap_enable_reg_pp0_iter77;
reg    ap_enable_reg_pp0_iter78;
reg    ap_enable_reg_pp0_iter79;
reg    ap_enable_reg_pp0_iter80;
reg    ap_enable_reg_pp0_iter81;
reg    ap_enable_reg_pp0_iter82;
reg    ap_enable_reg_pp0_iter83;
reg    ap_enable_reg_pp0_iter84;
reg    ap_enable_reg_pp0_iter85;
reg    ap_enable_reg_pp0_iter86;
reg    ap_enable_reg_pp0_iter87;
reg    ap_enable_reg_pp0_iter88;
reg    ap_enable_reg_pp0_iter89;
reg    ap_enable_reg_pp0_iter90;
reg    ap_enable_reg_pp0_iter91;
reg    ap_enable_reg_pp0_iter92;
reg    ap_enable_reg_pp0_iter93;
reg    ap_enable_reg_pp0_iter94;
reg    ap_enable_reg_pp0_iter95;
reg    ap_enable_reg_pp0_iter96;
reg    ap_enable_reg_pp0_iter97;
reg    ap_enable_reg_pp0_iter98;
reg    ap_enable_reg_pp0_iter99;
reg    ap_enable_reg_pp0_iter100;
reg    ap_enable_reg_pp0_iter101;
reg    ap_enable_reg_pp0_iter102;
reg    ap_enable_reg_pp0_iter103;
reg    ap_enable_reg_pp0_iter104;
reg    ap_enable_reg_pp0_iter105;
reg    ap_enable_reg_pp0_iter106;
reg    ap_enable_reg_pp0_iter107;
reg    ap_enable_reg_pp0_iter108;
reg    ap_enable_reg_pp0_iter109;
reg    ap_enable_reg_pp0_iter110;
reg    ap_enable_reg_pp0_iter111;
reg    ap_enable_reg_pp0_iter112;
reg    ap_enable_reg_pp0_iter113;
reg    ap_enable_reg_pp0_iter114;
reg    ap_enable_reg_pp0_iter115;
reg    ap_enable_reg_pp0_iter116;
reg    ap_enable_reg_pp0_iter117;
reg    ap_enable_reg_pp0_iter118;
reg    ap_enable_reg_pp0_iter119;
reg    ap_enable_reg_pp0_iter120;
reg    ap_enable_reg_pp0_iter121;
reg    ap_enable_reg_pp0_iter122;
reg    ap_enable_reg_pp0_iter123;
reg    ap_enable_reg_pp0_iter124;
reg    ap_enable_reg_pp0_iter125;
wire  signed [63:0] sum_cast_i_fu_201_p1;
reg    ap_reg_ioackin_m_axi_var_output_0_2_V_AWREADY;
reg    ap_block_pp0_stage0_01001;
reg    ap_reg_ioackin_m_axi_var_output_0_2_V_WREADY;
reg   [31:0] i_fu_100;
wire   [31:0] i_1_fu_190_p2;
wire   [25:0] tmp_1_fu_150_p4;
wire  signed [31:0] tmp_i_i_i_fu_172_p0;
wire  signed [31:0] tmp_2_i_i_cast_i_fu_177_p0;
wire  signed [32:0] tmp_2_i_i_cast_i_fu_177_p1;
wire  signed [31:0] i_1_fu_190_p0;
wire    ap_CS_fsm_state129;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_condition_1045;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter126 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter11 = 1'b0;
#0 ap_enable_reg_pp0_iter12 = 1'b0;
#0 ap_enable_reg_pp0_iter13 = 1'b0;
#0 ap_enable_reg_pp0_iter14 = 1'b0;
#0 ap_enable_reg_pp0_iter15 = 1'b0;
#0 ap_enable_reg_pp0_iter16 = 1'b0;
#0 ap_enable_reg_pp0_iter17 = 1'b0;
#0 ap_enable_reg_pp0_iter18 = 1'b0;
#0 ap_enable_reg_pp0_iter19 = 1'b0;
#0 ap_enable_reg_pp0_iter20 = 1'b0;
#0 ap_enable_reg_pp0_iter21 = 1'b0;
#0 ap_enable_reg_pp0_iter22 = 1'b0;
#0 ap_enable_reg_pp0_iter23 = 1'b0;
#0 ap_enable_reg_pp0_iter24 = 1'b0;
#0 ap_enable_reg_pp0_iter25 = 1'b0;
#0 ap_enable_reg_pp0_iter26 = 1'b0;
#0 ap_enable_reg_pp0_iter27 = 1'b0;
#0 ap_enable_reg_pp0_iter28 = 1'b0;
#0 ap_enable_reg_pp0_iter29 = 1'b0;
#0 ap_enable_reg_pp0_iter30 = 1'b0;
#0 ap_enable_reg_pp0_iter31 = 1'b0;
#0 ap_enable_reg_pp0_iter32 = 1'b0;
#0 ap_enable_reg_pp0_iter33 = 1'b0;
#0 ap_enable_reg_pp0_iter34 = 1'b0;
#0 ap_enable_reg_pp0_iter35 = 1'b0;
#0 ap_enable_reg_pp0_iter36 = 1'b0;
#0 ap_enable_reg_pp0_iter37 = 1'b0;
#0 ap_enable_reg_pp0_iter38 = 1'b0;
#0 ap_enable_reg_pp0_iter39 = 1'b0;
#0 ap_enable_reg_pp0_iter40 = 1'b0;
#0 ap_enable_reg_pp0_iter41 = 1'b0;
#0 ap_enable_reg_pp0_iter42 = 1'b0;
#0 ap_enable_reg_pp0_iter43 = 1'b0;
#0 ap_enable_reg_pp0_iter44 = 1'b0;
#0 ap_enable_reg_pp0_iter45 = 1'b0;
#0 ap_enable_reg_pp0_iter46 = 1'b0;
#0 ap_enable_reg_pp0_iter47 = 1'b0;
#0 ap_enable_reg_pp0_iter48 = 1'b0;
#0 ap_enable_reg_pp0_iter49 = 1'b0;
#0 ap_enable_reg_pp0_iter50 = 1'b0;
#0 ap_enable_reg_pp0_iter51 = 1'b0;
#0 ap_enable_reg_pp0_iter52 = 1'b0;
#0 ap_enable_reg_pp0_iter53 = 1'b0;
#0 ap_enable_reg_pp0_iter54 = 1'b0;
#0 ap_enable_reg_pp0_iter55 = 1'b0;
#0 ap_enable_reg_pp0_iter56 = 1'b0;
#0 ap_enable_reg_pp0_iter57 = 1'b0;
#0 ap_enable_reg_pp0_iter58 = 1'b0;
#0 ap_enable_reg_pp0_iter59 = 1'b0;
#0 ap_enable_reg_pp0_iter60 = 1'b0;
#0 ap_enable_reg_pp0_iter61 = 1'b0;
#0 ap_enable_reg_pp0_iter62 = 1'b0;
#0 ap_enable_reg_pp0_iter63 = 1'b0;
#0 ap_enable_reg_pp0_iter64 = 1'b0;
#0 ap_enable_reg_pp0_iter65 = 1'b0;
#0 ap_enable_reg_pp0_iter66 = 1'b0;
#0 ap_enable_reg_pp0_iter67 = 1'b0;
#0 ap_enable_reg_pp0_iter68 = 1'b0;
#0 ap_enable_reg_pp0_iter69 = 1'b0;
#0 ap_enable_reg_pp0_iter70 = 1'b0;
#0 ap_enable_reg_pp0_iter71 = 1'b0;
#0 ap_enable_reg_pp0_iter72 = 1'b0;
#0 ap_enable_reg_pp0_iter73 = 1'b0;
#0 ap_enable_reg_pp0_iter74 = 1'b0;
#0 ap_enable_reg_pp0_iter75 = 1'b0;
#0 ap_enable_reg_pp0_iter76 = 1'b0;
#0 ap_enable_reg_pp0_iter77 = 1'b0;
#0 ap_enable_reg_pp0_iter78 = 1'b0;
#0 ap_enable_reg_pp0_iter79 = 1'b0;
#0 ap_enable_reg_pp0_iter80 = 1'b0;
#0 ap_enable_reg_pp0_iter81 = 1'b0;
#0 ap_enable_reg_pp0_iter82 = 1'b0;
#0 ap_enable_reg_pp0_iter83 = 1'b0;
#0 ap_enable_reg_pp0_iter84 = 1'b0;
#0 ap_enable_reg_pp0_iter85 = 1'b0;
#0 ap_enable_reg_pp0_iter86 = 1'b0;
#0 ap_enable_reg_pp0_iter87 = 1'b0;
#0 ap_enable_reg_pp0_iter88 = 1'b0;
#0 ap_enable_reg_pp0_iter89 = 1'b0;
#0 ap_enable_reg_pp0_iter90 = 1'b0;
#0 ap_enable_reg_pp0_iter91 = 1'b0;
#0 ap_enable_reg_pp0_iter92 = 1'b0;
#0 ap_enable_reg_pp0_iter93 = 1'b0;
#0 ap_enable_reg_pp0_iter94 = 1'b0;
#0 ap_enable_reg_pp0_iter95 = 1'b0;
#0 ap_enable_reg_pp0_iter96 = 1'b0;
#0 ap_enable_reg_pp0_iter97 = 1'b0;
#0 ap_enable_reg_pp0_iter98 = 1'b0;
#0 ap_enable_reg_pp0_iter99 = 1'b0;
#0 ap_enable_reg_pp0_iter100 = 1'b0;
#0 ap_enable_reg_pp0_iter101 = 1'b0;
#0 ap_enable_reg_pp0_iter102 = 1'b0;
#0 ap_enable_reg_pp0_iter103 = 1'b0;
#0 ap_enable_reg_pp0_iter104 = 1'b0;
#0 ap_enable_reg_pp0_iter105 = 1'b0;
#0 ap_enable_reg_pp0_iter106 = 1'b0;
#0 ap_enable_reg_pp0_iter107 = 1'b0;
#0 ap_enable_reg_pp0_iter108 = 1'b0;
#0 ap_enable_reg_pp0_iter109 = 1'b0;
#0 ap_enable_reg_pp0_iter110 = 1'b0;
#0 ap_enable_reg_pp0_iter111 = 1'b0;
#0 ap_enable_reg_pp0_iter112 = 1'b0;
#0 ap_enable_reg_pp0_iter113 = 1'b0;
#0 ap_enable_reg_pp0_iter114 = 1'b0;
#0 ap_enable_reg_pp0_iter115 = 1'b0;
#0 ap_enable_reg_pp0_iter116 = 1'b0;
#0 ap_enable_reg_pp0_iter117 = 1'b0;
#0 ap_enable_reg_pp0_iter118 = 1'b0;
#0 ap_enable_reg_pp0_iter119 = 1'b0;
#0 ap_enable_reg_pp0_iter120 = 1'b0;
#0 ap_enable_reg_pp0_iter121 = 1'b0;
#0 ap_enable_reg_pp0_iter122 = 1'b0;
#0 ap_enable_reg_pp0_iter123 = 1'b0;
#0 ap_enable_reg_pp0_iter124 = 1'b0;
#0 ap_enable_reg_pp0_iter125 = 1'b0;
#0 ap_reg_ioackin_m_axi_var_output_0_2_V_AWREADY = 1'b0;
#0 ap_reg_ioackin_m_axi_var_output_0_2_V_WREADY = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state129)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((coalesced_data_num_empty_n == 1'b0) | (var_output_0_2_V_offset_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter100 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter100 <= ap_enable_reg_pp0_iter99;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter101 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter101 <= ap_enable_reg_pp0_iter100;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter102 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter102 <= ap_enable_reg_pp0_iter101;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter103 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter103 <= ap_enable_reg_pp0_iter102;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter104 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter104 <= ap_enable_reg_pp0_iter103;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter105 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter105 <= ap_enable_reg_pp0_iter104;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter106 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter106 <= ap_enable_reg_pp0_iter105;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter107 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter107 <= ap_enable_reg_pp0_iter106;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter108 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter108 <= ap_enable_reg_pp0_iter107;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter109 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter109 <= ap_enable_reg_pp0_iter108;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter110 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter110 <= ap_enable_reg_pp0_iter109;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter111 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter111 <= ap_enable_reg_pp0_iter110;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter112 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter112 <= ap_enable_reg_pp0_iter111;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter113 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter113 <= ap_enable_reg_pp0_iter112;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter114 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter114 <= ap_enable_reg_pp0_iter113;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter115 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter115 <= ap_enable_reg_pp0_iter114;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter116 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter116 <= ap_enable_reg_pp0_iter115;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter117 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter117 <= ap_enable_reg_pp0_iter116;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter118 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter118 <= ap_enable_reg_pp0_iter117;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter119 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter119 <= ap_enable_reg_pp0_iter118;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter12 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter120 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter120 <= ap_enable_reg_pp0_iter119;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter121 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter121 <= ap_enable_reg_pp0_iter120;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter122 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter122 <= ap_enable_reg_pp0_iter121;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter123 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter123 <= ap_enable_reg_pp0_iter122;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter124 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter124 <= ap_enable_reg_pp0_iter123;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter125 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter125 <= ap_enable_reg_pp0_iter124;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter126 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter126 <= ap_enable_reg_pp0_iter125;
        end else if ((~((coalesced_data_num_empty_n == 1'b0) | (var_output_0_2_V_offset_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter126 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter13 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter14 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter15 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter16 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter17 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter18 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter19 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter19 <= ap_enable_reg_pp0_iter18;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter20 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter20 <= ap_enable_reg_pp0_iter19;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter21 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter21 <= ap_enable_reg_pp0_iter20;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter22 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter22 <= ap_enable_reg_pp0_iter21;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter23 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter23 <= ap_enable_reg_pp0_iter22;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter24 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter24 <= ap_enable_reg_pp0_iter23;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter25 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter25 <= ap_enable_reg_pp0_iter24;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter26 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter26 <= ap_enable_reg_pp0_iter25;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter27 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter27 <= ap_enable_reg_pp0_iter26;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter28 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter28 <= ap_enable_reg_pp0_iter27;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter29 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter29 <= ap_enable_reg_pp0_iter28;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter30 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter30 <= ap_enable_reg_pp0_iter29;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter31 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter31 <= ap_enable_reg_pp0_iter30;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter32 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter32 <= ap_enable_reg_pp0_iter31;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter33 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter33 <= ap_enable_reg_pp0_iter32;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter34 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter34 <= ap_enable_reg_pp0_iter33;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter35 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter35 <= ap_enable_reg_pp0_iter34;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter36 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter36 <= ap_enable_reg_pp0_iter35;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter37 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter37 <= ap_enable_reg_pp0_iter36;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter38 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter38 <= ap_enable_reg_pp0_iter37;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter39 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter39 <= ap_enable_reg_pp0_iter38;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter40 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter40 <= ap_enable_reg_pp0_iter39;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter41 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter41 <= ap_enable_reg_pp0_iter40;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter42 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter42 <= ap_enable_reg_pp0_iter41;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter43 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter43 <= ap_enable_reg_pp0_iter42;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter44 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter44 <= ap_enable_reg_pp0_iter43;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter45 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter45 <= ap_enable_reg_pp0_iter44;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter46 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter46 <= ap_enable_reg_pp0_iter45;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter47 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter47 <= ap_enable_reg_pp0_iter46;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter48 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter48 <= ap_enable_reg_pp0_iter47;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter49 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter49 <= ap_enable_reg_pp0_iter48;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter50 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter50 <= ap_enable_reg_pp0_iter49;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter51 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter51 <= ap_enable_reg_pp0_iter50;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter52 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter52 <= ap_enable_reg_pp0_iter51;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter53 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter53 <= ap_enable_reg_pp0_iter52;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter54 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter54 <= ap_enable_reg_pp0_iter53;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter55 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter55 <= ap_enable_reg_pp0_iter54;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter56 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter56 <= ap_enable_reg_pp0_iter55;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter57 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter57 <= ap_enable_reg_pp0_iter56;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter58 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter58 <= ap_enable_reg_pp0_iter57;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter59 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter59 <= ap_enable_reg_pp0_iter58;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter60 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter60 <= ap_enable_reg_pp0_iter59;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter61 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter61 <= ap_enable_reg_pp0_iter60;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter62 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter62 <= ap_enable_reg_pp0_iter61;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter63 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter63 <= ap_enable_reg_pp0_iter62;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter64 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter64 <= ap_enable_reg_pp0_iter63;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter65 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter65 <= ap_enable_reg_pp0_iter64;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter66 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter66 <= ap_enable_reg_pp0_iter65;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter67 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter67 <= ap_enable_reg_pp0_iter66;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter68 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter68 <= ap_enable_reg_pp0_iter67;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter69 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter69 <= ap_enable_reg_pp0_iter68;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter70 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter70 <= ap_enable_reg_pp0_iter69;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter71 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter71 <= ap_enable_reg_pp0_iter70;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter72 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter72 <= ap_enable_reg_pp0_iter71;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter73 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter73 <= ap_enable_reg_pp0_iter72;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter74 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter74 <= ap_enable_reg_pp0_iter73;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter75 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter75 <= ap_enable_reg_pp0_iter74;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter76 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter76 <= ap_enable_reg_pp0_iter75;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter77 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter77 <= ap_enable_reg_pp0_iter76;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter78 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter78 <= ap_enable_reg_pp0_iter77;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter79 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter79 <= ap_enable_reg_pp0_iter78;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter80 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter80 <= ap_enable_reg_pp0_iter79;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter81 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter81 <= ap_enable_reg_pp0_iter80;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter82 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter82 <= ap_enable_reg_pp0_iter81;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter83 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter83 <= ap_enable_reg_pp0_iter82;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter84 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter84 <= ap_enable_reg_pp0_iter83;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter85 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter85 <= ap_enable_reg_pp0_iter84;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter86 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter86 <= ap_enable_reg_pp0_iter85;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter87 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter87 <= ap_enable_reg_pp0_iter86;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter88 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter88 <= ap_enable_reg_pp0_iter87;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter89 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter89 <= ap_enable_reg_pp0_iter88;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter90 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter90 <= ap_enable_reg_pp0_iter89;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter91 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter91 <= ap_enable_reg_pp0_iter90;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter92 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter92 <= ap_enable_reg_pp0_iter91;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter93 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter93 <= ap_enable_reg_pp0_iter92;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter94 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter94 <= ap_enable_reg_pp0_iter93;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter95 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter95 <= ap_enable_reg_pp0_iter94;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter96 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter96 <= ap_enable_reg_pp0_iter95;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter97 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter97 <= ap_enable_reg_pp0_iter96;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter98 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter98 <= ap_enable_reg_pp0_iter97;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter99 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter99 <= ap_enable_reg_pp0_iter98;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ioackin_m_axi_var_output_0_2_V_AWREADY <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_1045)) begin
            if ((1'b0 == ap_block_pp0_stage0_11001)) begin
                ap_reg_ioackin_m_axi_var_output_0_2_V_AWREADY <= 1'b0;
            end else if (((1'b0 == ap_block_pp0_stage0_01001) & (m_axi_var_output_0_2_V_AWREADY == 1'b1))) begin
                ap_reg_ioackin_m_axi_var_output_0_2_V_AWREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ioackin_m_axi_var_output_0_2_V_WREADY <= 1'b0;
    end else begin
        if (((ap_enable_reg_pp0_iter2 == 1'b1) & (tmp_2_reg_231_pp0_iter1_reg == 1'd1))) begin
            if ((1'b0 == ap_block_pp0_stage0_11001)) begin
                ap_reg_ioackin_m_axi_var_output_0_2_V_WREADY <= 1'b0;
            end else if (((1'b0 == ap_block_pp0_stage0_01001) & (m_axi_var_output_0_2_V_WREADY == 1'b1))) begin
                ap_reg_ioackin_m_axi_var_output_0_2_V_WREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (tmp_i_i_i_fu_172_p2 == 1'd1) & (tmp_2_nbreadreq_fu_116_p3 == 1'd1))) begin
        i_fu_100 <= i_1_fu_190_p2;
    end else if ((~((coalesced_data_num_empty_n == 1'b0) | (var_output_0_2_V_offset_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        i_fu_100 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((coalesced_data_num_empty_n == 1'b0) | (var_output_0_2_V_offset_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        sext_cast_i_reg_223[25 : 0] <= sext_cast_i_fu_160_p1[25 : 0];
        tmp_reg_218 <= tmp_fu_146_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_i_i_i_fu_172_p2 == 1'd1) & (tmp_2_nbreadreq_fu_116_p3 == 1'd1))) begin
        sum_i_reg_240 <= sum_i_fu_185_p2;
        tmp_V_reg_235 <= output_stream_0_2_V_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_i_i_i_fu_172_p2 == 1'd1))) begin
        tmp_2_reg_231 <= output_stream_0_2_V_V_empty_n;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        tmp_2_reg_231_pp0_iter100_reg <= tmp_2_reg_231_pp0_iter99_reg;
        tmp_2_reg_231_pp0_iter101_reg <= tmp_2_reg_231_pp0_iter100_reg;
        tmp_2_reg_231_pp0_iter102_reg <= tmp_2_reg_231_pp0_iter101_reg;
        tmp_2_reg_231_pp0_iter103_reg <= tmp_2_reg_231_pp0_iter102_reg;
        tmp_2_reg_231_pp0_iter104_reg <= tmp_2_reg_231_pp0_iter103_reg;
        tmp_2_reg_231_pp0_iter105_reg <= tmp_2_reg_231_pp0_iter104_reg;
        tmp_2_reg_231_pp0_iter106_reg <= tmp_2_reg_231_pp0_iter105_reg;
        tmp_2_reg_231_pp0_iter107_reg <= tmp_2_reg_231_pp0_iter106_reg;
        tmp_2_reg_231_pp0_iter108_reg <= tmp_2_reg_231_pp0_iter107_reg;
        tmp_2_reg_231_pp0_iter109_reg <= tmp_2_reg_231_pp0_iter108_reg;
        tmp_2_reg_231_pp0_iter10_reg <= tmp_2_reg_231_pp0_iter9_reg;
        tmp_2_reg_231_pp0_iter110_reg <= tmp_2_reg_231_pp0_iter109_reg;
        tmp_2_reg_231_pp0_iter111_reg <= tmp_2_reg_231_pp0_iter110_reg;
        tmp_2_reg_231_pp0_iter112_reg <= tmp_2_reg_231_pp0_iter111_reg;
        tmp_2_reg_231_pp0_iter113_reg <= tmp_2_reg_231_pp0_iter112_reg;
        tmp_2_reg_231_pp0_iter114_reg <= tmp_2_reg_231_pp0_iter113_reg;
        tmp_2_reg_231_pp0_iter115_reg <= tmp_2_reg_231_pp0_iter114_reg;
        tmp_2_reg_231_pp0_iter116_reg <= tmp_2_reg_231_pp0_iter115_reg;
        tmp_2_reg_231_pp0_iter117_reg <= tmp_2_reg_231_pp0_iter116_reg;
        tmp_2_reg_231_pp0_iter118_reg <= tmp_2_reg_231_pp0_iter117_reg;
        tmp_2_reg_231_pp0_iter119_reg <= tmp_2_reg_231_pp0_iter118_reg;
        tmp_2_reg_231_pp0_iter11_reg <= tmp_2_reg_231_pp0_iter10_reg;
        tmp_2_reg_231_pp0_iter120_reg <= tmp_2_reg_231_pp0_iter119_reg;
        tmp_2_reg_231_pp0_iter121_reg <= tmp_2_reg_231_pp0_iter120_reg;
        tmp_2_reg_231_pp0_iter122_reg <= tmp_2_reg_231_pp0_iter121_reg;
        tmp_2_reg_231_pp0_iter123_reg <= tmp_2_reg_231_pp0_iter122_reg;
        tmp_2_reg_231_pp0_iter124_reg <= tmp_2_reg_231_pp0_iter123_reg;
        tmp_2_reg_231_pp0_iter125_reg <= tmp_2_reg_231_pp0_iter124_reg;
        tmp_2_reg_231_pp0_iter12_reg <= tmp_2_reg_231_pp0_iter11_reg;
        tmp_2_reg_231_pp0_iter13_reg <= tmp_2_reg_231_pp0_iter12_reg;
        tmp_2_reg_231_pp0_iter14_reg <= tmp_2_reg_231_pp0_iter13_reg;
        tmp_2_reg_231_pp0_iter15_reg <= tmp_2_reg_231_pp0_iter14_reg;
        tmp_2_reg_231_pp0_iter16_reg <= tmp_2_reg_231_pp0_iter15_reg;
        tmp_2_reg_231_pp0_iter17_reg <= tmp_2_reg_231_pp0_iter16_reg;
        tmp_2_reg_231_pp0_iter18_reg <= tmp_2_reg_231_pp0_iter17_reg;
        tmp_2_reg_231_pp0_iter19_reg <= tmp_2_reg_231_pp0_iter18_reg;
        tmp_2_reg_231_pp0_iter20_reg <= tmp_2_reg_231_pp0_iter19_reg;
        tmp_2_reg_231_pp0_iter21_reg <= tmp_2_reg_231_pp0_iter20_reg;
        tmp_2_reg_231_pp0_iter22_reg <= tmp_2_reg_231_pp0_iter21_reg;
        tmp_2_reg_231_pp0_iter23_reg <= tmp_2_reg_231_pp0_iter22_reg;
        tmp_2_reg_231_pp0_iter24_reg <= tmp_2_reg_231_pp0_iter23_reg;
        tmp_2_reg_231_pp0_iter25_reg <= tmp_2_reg_231_pp0_iter24_reg;
        tmp_2_reg_231_pp0_iter26_reg <= tmp_2_reg_231_pp0_iter25_reg;
        tmp_2_reg_231_pp0_iter27_reg <= tmp_2_reg_231_pp0_iter26_reg;
        tmp_2_reg_231_pp0_iter28_reg <= tmp_2_reg_231_pp0_iter27_reg;
        tmp_2_reg_231_pp0_iter29_reg <= tmp_2_reg_231_pp0_iter28_reg;
        tmp_2_reg_231_pp0_iter2_reg <= tmp_2_reg_231_pp0_iter1_reg;
        tmp_2_reg_231_pp0_iter30_reg <= tmp_2_reg_231_pp0_iter29_reg;
        tmp_2_reg_231_pp0_iter31_reg <= tmp_2_reg_231_pp0_iter30_reg;
        tmp_2_reg_231_pp0_iter32_reg <= tmp_2_reg_231_pp0_iter31_reg;
        tmp_2_reg_231_pp0_iter33_reg <= tmp_2_reg_231_pp0_iter32_reg;
        tmp_2_reg_231_pp0_iter34_reg <= tmp_2_reg_231_pp0_iter33_reg;
        tmp_2_reg_231_pp0_iter35_reg <= tmp_2_reg_231_pp0_iter34_reg;
        tmp_2_reg_231_pp0_iter36_reg <= tmp_2_reg_231_pp0_iter35_reg;
        tmp_2_reg_231_pp0_iter37_reg <= tmp_2_reg_231_pp0_iter36_reg;
        tmp_2_reg_231_pp0_iter38_reg <= tmp_2_reg_231_pp0_iter37_reg;
        tmp_2_reg_231_pp0_iter39_reg <= tmp_2_reg_231_pp0_iter38_reg;
        tmp_2_reg_231_pp0_iter3_reg <= tmp_2_reg_231_pp0_iter2_reg;
        tmp_2_reg_231_pp0_iter40_reg <= tmp_2_reg_231_pp0_iter39_reg;
        tmp_2_reg_231_pp0_iter41_reg <= tmp_2_reg_231_pp0_iter40_reg;
        tmp_2_reg_231_pp0_iter42_reg <= tmp_2_reg_231_pp0_iter41_reg;
        tmp_2_reg_231_pp0_iter43_reg <= tmp_2_reg_231_pp0_iter42_reg;
        tmp_2_reg_231_pp0_iter44_reg <= tmp_2_reg_231_pp0_iter43_reg;
        tmp_2_reg_231_pp0_iter45_reg <= tmp_2_reg_231_pp0_iter44_reg;
        tmp_2_reg_231_pp0_iter46_reg <= tmp_2_reg_231_pp0_iter45_reg;
        tmp_2_reg_231_pp0_iter47_reg <= tmp_2_reg_231_pp0_iter46_reg;
        tmp_2_reg_231_pp0_iter48_reg <= tmp_2_reg_231_pp0_iter47_reg;
        tmp_2_reg_231_pp0_iter49_reg <= tmp_2_reg_231_pp0_iter48_reg;
        tmp_2_reg_231_pp0_iter4_reg <= tmp_2_reg_231_pp0_iter3_reg;
        tmp_2_reg_231_pp0_iter50_reg <= tmp_2_reg_231_pp0_iter49_reg;
        tmp_2_reg_231_pp0_iter51_reg <= tmp_2_reg_231_pp0_iter50_reg;
        tmp_2_reg_231_pp0_iter52_reg <= tmp_2_reg_231_pp0_iter51_reg;
        tmp_2_reg_231_pp0_iter53_reg <= tmp_2_reg_231_pp0_iter52_reg;
        tmp_2_reg_231_pp0_iter54_reg <= tmp_2_reg_231_pp0_iter53_reg;
        tmp_2_reg_231_pp0_iter55_reg <= tmp_2_reg_231_pp0_iter54_reg;
        tmp_2_reg_231_pp0_iter56_reg <= tmp_2_reg_231_pp0_iter55_reg;
        tmp_2_reg_231_pp0_iter57_reg <= tmp_2_reg_231_pp0_iter56_reg;
        tmp_2_reg_231_pp0_iter58_reg <= tmp_2_reg_231_pp0_iter57_reg;
        tmp_2_reg_231_pp0_iter59_reg <= tmp_2_reg_231_pp0_iter58_reg;
        tmp_2_reg_231_pp0_iter5_reg <= tmp_2_reg_231_pp0_iter4_reg;
        tmp_2_reg_231_pp0_iter60_reg <= tmp_2_reg_231_pp0_iter59_reg;
        tmp_2_reg_231_pp0_iter61_reg <= tmp_2_reg_231_pp0_iter60_reg;
        tmp_2_reg_231_pp0_iter62_reg <= tmp_2_reg_231_pp0_iter61_reg;
        tmp_2_reg_231_pp0_iter63_reg <= tmp_2_reg_231_pp0_iter62_reg;
        tmp_2_reg_231_pp0_iter64_reg <= tmp_2_reg_231_pp0_iter63_reg;
        tmp_2_reg_231_pp0_iter65_reg <= tmp_2_reg_231_pp0_iter64_reg;
        tmp_2_reg_231_pp0_iter66_reg <= tmp_2_reg_231_pp0_iter65_reg;
        tmp_2_reg_231_pp0_iter67_reg <= tmp_2_reg_231_pp0_iter66_reg;
        tmp_2_reg_231_pp0_iter68_reg <= tmp_2_reg_231_pp0_iter67_reg;
        tmp_2_reg_231_pp0_iter69_reg <= tmp_2_reg_231_pp0_iter68_reg;
        tmp_2_reg_231_pp0_iter6_reg <= tmp_2_reg_231_pp0_iter5_reg;
        tmp_2_reg_231_pp0_iter70_reg <= tmp_2_reg_231_pp0_iter69_reg;
        tmp_2_reg_231_pp0_iter71_reg <= tmp_2_reg_231_pp0_iter70_reg;
        tmp_2_reg_231_pp0_iter72_reg <= tmp_2_reg_231_pp0_iter71_reg;
        tmp_2_reg_231_pp0_iter73_reg <= tmp_2_reg_231_pp0_iter72_reg;
        tmp_2_reg_231_pp0_iter74_reg <= tmp_2_reg_231_pp0_iter73_reg;
        tmp_2_reg_231_pp0_iter75_reg <= tmp_2_reg_231_pp0_iter74_reg;
        tmp_2_reg_231_pp0_iter76_reg <= tmp_2_reg_231_pp0_iter75_reg;
        tmp_2_reg_231_pp0_iter77_reg <= tmp_2_reg_231_pp0_iter76_reg;
        tmp_2_reg_231_pp0_iter78_reg <= tmp_2_reg_231_pp0_iter77_reg;
        tmp_2_reg_231_pp0_iter79_reg <= tmp_2_reg_231_pp0_iter78_reg;
        tmp_2_reg_231_pp0_iter7_reg <= tmp_2_reg_231_pp0_iter6_reg;
        tmp_2_reg_231_pp0_iter80_reg <= tmp_2_reg_231_pp0_iter79_reg;
        tmp_2_reg_231_pp0_iter81_reg <= tmp_2_reg_231_pp0_iter80_reg;
        tmp_2_reg_231_pp0_iter82_reg <= tmp_2_reg_231_pp0_iter81_reg;
        tmp_2_reg_231_pp0_iter83_reg <= tmp_2_reg_231_pp0_iter82_reg;
        tmp_2_reg_231_pp0_iter84_reg <= tmp_2_reg_231_pp0_iter83_reg;
        tmp_2_reg_231_pp0_iter85_reg <= tmp_2_reg_231_pp0_iter84_reg;
        tmp_2_reg_231_pp0_iter86_reg <= tmp_2_reg_231_pp0_iter85_reg;
        tmp_2_reg_231_pp0_iter87_reg <= tmp_2_reg_231_pp0_iter86_reg;
        tmp_2_reg_231_pp0_iter88_reg <= tmp_2_reg_231_pp0_iter87_reg;
        tmp_2_reg_231_pp0_iter89_reg <= tmp_2_reg_231_pp0_iter88_reg;
        tmp_2_reg_231_pp0_iter8_reg <= tmp_2_reg_231_pp0_iter7_reg;
        tmp_2_reg_231_pp0_iter90_reg <= tmp_2_reg_231_pp0_iter89_reg;
        tmp_2_reg_231_pp0_iter91_reg <= tmp_2_reg_231_pp0_iter90_reg;
        tmp_2_reg_231_pp0_iter92_reg <= tmp_2_reg_231_pp0_iter91_reg;
        tmp_2_reg_231_pp0_iter93_reg <= tmp_2_reg_231_pp0_iter92_reg;
        tmp_2_reg_231_pp0_iter94_reg <= tmp_2_reg_231_pp0_iter93_reg;
        tmp_2_reg_231_pp0_iter95_reg <= tmp_2_reg_231_pp0_iter94_reg;
        tmp_2_reg_231_pp0_iter96_reg <= tmp_2_reg_231_pp0_iter95_reg;
        tmp_2_reg_231_pp0_iter97_reg <= tmp_2_reg_231_pp0_iter96_reg;
        tmp_2_reg_231_pp0_iter98_reg <= tmp_2_reg_231_pp0_iter97_reg;
        tmp_2_reg_231_pp0_iter99_reg <= tmp_2_reg_231_pp0_iter98_reg;
        tmp_2_reg_231_pp0_iter9_reg <= tmp_2_reg_231_pp0_iter8_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_2_reg_231_pp0_iter1_reg <= tmp_2_reg_231;
        tmp_V_reg_235_pp0_iter1_reg <= tmp_V_reg_235;
    end
end

always @ (*) begin
    if ((tmp_i_i_i_fu_172_p2 == 1'd0)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state129)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter125 == 1'b0) & (ap_enable_reg_pp0_iter124 == 1'b0) & (ap_enable_reg_pp0_iter123 == 1'b0) & (ap_enable_reg_pp0_iter122 == 1'b0) & (ap_enable_reg_pp0_iter121 == 1'b0) & (ap_enable_reg_pp0_iter120 == 1'b0) & (ap_enable_reg_pp0_iter119 == 1'b0) & (ap_enable_reg_pp0_iter118 == 1'b0) & (ap_enable_reg_pp0_iter117 == 1'b0) & (ap_enable_reg_pp0_iter116 == 1'b0) & (ap_enable_reg_pp0_iter115 == 1'b0) & (ap_enable_reg_pp0_iter114 == 1'b0) & (ap_enable_reg_pp0_iter113 == 1'b0) & (ap_enable_reg_pp0_iter112 == 1'b0) & (ap_enable_reg_pp0_iter111 == 1'b0) & (ap_enable_reg_pp0_iter110 == 1'b0) & (ap_enable_reg_pp0_iter109 == 1'b0) & (ap_enable_reg_pp0_iter108 == 1'b0) & (ap_enable_reg_pp0_iter107 == 1'b0) & (ap_enable_reg_pp0_iter106 == 1'b0) & (ap_enable_reg_pp0_iter105 == 1'b0) & (ap_enable_reg_pp0_iter104 == 1'b0) & (ap_enable_reg_pp0_iter103 == 1'b0) & (ap_enable_reg_pp0_iter102 == 1'b0) & (ap_enable_reg_pp0_iter101 == 1'b0) & (ap_enable_reg_pp0_iter100 == 1'b0) & (ap_enable_reg_pp0_iter99 == 1'b0) & (ap_enable_reg_pp0_iter98 == 1'b0) & (ap_enable_reg_pp0_iter97 == 1'b0) & (ap_enable_reg_pp0_iter96 == 1'b0) & (ap_enable_reg_pp0_iter95 == 1'b0) & (ap_enable_reg_pp0_iter94 == 1'b0) & (ap_enable_reg_pp0_iter93 == 1'b0) & (ap_enable_reg_pp0_iter92 == 1'b0) & (ap_enable_reg_pp0_iter91 == 1'b0) & (ap_enable_reg_pp0_iter90 == 1'b0) & (ap_enable_reg_pp0_iter89 == 1'b0) & (ap_enable_reg_pp0_iter88 == 1'b0) & (ap_enable_reg_pp0_iter87 == 1'b0) & (ap_enable_reg_pp0_iter86 == 1'b0) & (ap_enable_reg_pp0_iter85 == 1'b0) & (ap_enable_reg_pp0_iter84 == 1'b0) & (ap_enable_reg_pp0_iter83 == 1'b0) & (ap_enable_reg_pp0_iter82 == 1'b0) & (ap_enable_reg_pp0_iter81 == 1'b0) & (ap_enable_reg_pp0_iter80 == 1'b0) & (ap_enable_reg_pp0_iter79 == 1'b0) & (ap_enable_reg_pp0_iter78 == 1'b0) & (ap_enable_reg_pp0_iter77 == 1'b0) & (ap_enable_reg_pp0_iter76 == 1'b0) & (ap_enable_reg_pp0_iter75 == 1'b0) & (ap_enable_reg_pp0_iter74 == 1'b0) & (ap_enable_reg_pp0_iter73 == 1'b0) & (ap_enable_reg_pp0_iter72 == 1'b0) & (ap_enable_reg_pp0_iter71 == 1'b0) & (ap_enable_reg_pp0_iter70 == 1'b0) & (ap_enable_reg_pp0_iter69 == 1'b0) & (ap_enable_reg_pp0_iter68 == 1'b0) & (ap_enable_reg_pp0_iter67 == 1'b0) & (ap_enable_reg_pp0_iter66 == 1'b0) & (ap_enable_reg_pp0_iter65 == 1'b0) & (ap_enable_reg_pp0_iter64 == 1'b0) & (ap_enable_reg_pp0_iter63 == 1'b0) & (ap_enable_reg_pp0_iter62 == 1'b0) & (ap_enable_reg_pp0_iter61 == 1'b0) & (ap_enable_reg_pp0_iter60 == 1'b0) & (ap_enable_reg_pp0_iter59 == 1'b0) & (ap_enable_reg_pp0_iter58 == 1'b0) & (ap_enable_reg_pp0_iter57 == 1'b0) & (ap_enable_reg_pp0_iter56 == 1'b0) & (ap_enable_reg_pp0_iter55 == 1'b0) & (ap_enable_reg_pp0_iter54 == 1'b0) & (ap_enable_reg_pp0_iter53 == 1'b0) & (ap_enable_reg_pp0_iter52 == 1'b0) & (ap_enable_reg_pp0_iter51 == 1'b0) & (ap_enable_reg_pp0_iter50 == 1'b0) & (ap_enable_reg_pp0_iter49 == 1'b0) & (ap_enable_reg_pp0_iter48 == 1'b0) & (ap_enable_reg_pp0_iter47 == 1'b0) & (ap_enable_reg_pp0_iter46 == 1'b0) & (ap_enable_reg_pp0_iter45 == 1'b0) & (ap_enable_reg_pp0_iter44 == 1'b0) & (ap_enable_reg_pp0_iter43 == 1'b0) & (ap_enable_reg_pp0_iter42 == 1'b0) & (ap_enable_reg_pp0_iter41 == 1'b0) & (ap_enable_reg_pp0_iter40 == 1'b0) & (ap_enable_reg_pp0_iter39 == 1'b0) & (ap_enable_reg_pp0_iter38 == 1'b0) & (ap_enable_reg_pp0_iter37 == 1'b0) & (ap_enable_reg_pp0_iter36 == 1'b0) & (ap_enable_reg_pp0_iter35 == 1'b0) & (ap_enable_reg_pp0_iter34 == 1'b0) & (ap_enable_reg_pp0_iter33 == 1'b0) & (ap_enable_reg_pp0_iter32 == 1'b0) & (ap_enable_reg_pp0_iter31 == 1'b0) & (ap_enable_reg_pp0_iter30 == 1'b0) & (ap_enable_reg_pp0_iter29 == 1'b0) & (ap_enable_reg_pp0_iter28 == 1'b0) & (ap_enable_reg_pp0_iter27 == 1'b0) & (ap_enable_reg_pp0_iter26 == 1'b0) & (ap_enable_reg_pp0_iter25 == 1'b0) & (ap_enable_reg_pp0_iter24 == 1'b0) & (ap_enable_reg_pp0_iter23 == 1'b0) & (ap_enable_reg_pp0_iter22 == 1'b0) & (ap_enable_reg_pp0_iter21 == 1'b0) & (ap_enable_reg_pp0_iter20 == 1'b0) & (ap_enable_reg_pp0_iter19 == 1'b0) & (ap_enable_reg_pp0_iter18 == 1'b0) & (ap_enable_reg_pp0_iter17 == 1'b0) & (ap_enable_reg_pp0_iter16 == 1'b0) & (ap_enable_reg_pp0_iter15 == 1'b0) & (ap_enable_reg_pp0_iter14 == 1'b0) & (ap_enable_reg_pp0_iter13 == 1'b0) & (ap_enable_reg_pp0_iter12 == 1'b0) & (ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter126 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state129)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_m_axi_var_output_0_2_V_AWREADY == 1'b0)) begin
        ap_sig_ioackin_m_axi_var_output_0_2_V_AWREADY = m_axi_var_output_0_2_V_AWREADY;
    end else begin
        ap_sig_ioackin_m_axi_var_output_0_2_V_AWREADY = 1'b1;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_m_axi_var_output_0_2_V_WREADY == 1'b0)) begin
        ap_sig_ioackin_m_axi_var_output_0_2_V_WREADY = m_axi_var_output_0_2_V_WREADY;
    end else begin
        ap_sig_ioackin_m_axi_var_output_0_2_V_WREADY = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        coalesced_data_num_blk_n = coalesced_data_num_empty_n;
    end else begin
        coalesced_data_num_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((coalesced_data_num_empty_n == 1'b0) | (var_output_0_2_V_offset_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        coalesced_data_num_read = 1'b1;
    end else begin
        coalesced_data_num_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_01001) & (ap_reg_ioackin_m_axi_var_output_0_2_V_AWREADY == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_2_reg_231 == 1'd1))) begin
        m_axi_var_output_0_2_V_AWVALID = 1'b1;
    end else begin
        m_axi_var_output_0_2_V_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter126 == 1'b1) & (tmp_2_reg_231_pp0_iter125_reg == 1'd1))) begin
        m_axi_var_output_0_2_V_BREADY = 1'b1;
    end else begin
        m_axi_var_output_0_2_V_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_01001) & (ap_reg_ioackin_m_axi_var_output_0_2_V_WREADY == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (tmp_2_reg_231_pp0_iter1_reg == 1'd1))) begin
        m_axi_var_output_0_2_V_WVALID = 1'b1;
    end else begin
        m_axi_var_output_0_2_V_WVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (output_stream_0_2_V_V_empty_n == 1'b1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (tmp_i_i_i_fu_172_p2 == 1'd1) & (tmp_2_nbreadreq_fu_116_p3 == 1'd1))) begin
        output_stream_0_2_V_V_read = 1'b1;
    end else begin
        output_stream_0_2_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_2_reg_231 == 1'd1) & (1'b0 == ap_block_pp0_stage0))) begin
        var_output_0_2_V_blk_n_AW = m_axi_var_output_0_2_V_AWREADY;
    end else begin
        var_output_0_2_V_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter126 == 1'b1) & (tmp_2_reg_231_pp0_iter125_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0))) begin
        var_output_0_2_V_blk_n_B = m_axi_var_output_0_2_V_BVALID;
    end else begin
        var_output_0_2_V_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (tmp_2_reg_231_pp0_iter1_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0))) begin
        var_output_0_2_V_blk_n_W = m_axi_var_output_0_2_V_WREADY;
    end else begin
        var_output_0_2_V_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        var_output_0_2_V_offset_blk_n = var_output_0_2_V_offset_empty_n;
    end else begin
        var_output_0_2_V_offset_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((coalesced_data_num_empty_n == 1'b0) | (var_output_0_2_V_offset_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        var_output_0_2_V_offset_read = 1'b1;
    end else begin
        var_output_0_2_V_offset_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((coalesced_data_num_empty_n == 1'b0) | (var_output_0_2_V_offset_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter1 == 1'b0) & (tmp_i_i_i_fu_172_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1)) & ~((ap_enable_reg_pp0_iter125 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter126 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter1 == 1'b0) & (tmp_i_i_i_fu_172_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((ap_enable_reg_pp0_iter125 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter126 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state129;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state129 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state129 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((m_axi_var_output_0_2_V_BVALID == 1'b0) & (ap_enable_reg_pp0_iter126 == 1'b1) & (tmp_2_reg_231_pp0_iter125_reg == 1'd1));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((1'b1 == ap_block_state3_io) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((m_axi_var_output_0_2_V_BVALID == 1'b0) & (ap_enable_reg_pp0_iter126 == 1'b1) & (tmp_2_reg_231_pp0_iter125_reg == 1'd1)) | ((1'b1 == ap_block_state4_io) & (ap_enable_reg_pp0_iter2 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((1'b1 == ap_block_state3_io) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((m_axi_var_output_0_2_V_BVALID == 1'b0) & (ap_enable_reg_pp0_iter126 == 1'b1) & (tmp_2_reg_231_pp0_iter125_reg == 1'd1)) | ((1'b1 == ap_block_state4_io) & (ap_enable_reg_pp0_iter2 == 1'b1)));
end

always @ (*) begin
    ap_block_state1 = ((coalesced_data_num_empty_n == 1'b0) | (var_output_0_2_V_offset_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state100_pp0_stage0_iter98 = ~(1'b1 == 1'b1);

assign ap_block_state101_pp0_stage0_iter99 = ~(1'b1 == 1'b1);

assign ap_block_state102_pp0_stage0_iter100 = ~(1'b1 == 1'b1);

assign ap_block_state103_pp0_stage0_iter101 = ~(1'b1 == 1'b1);

assign ap_block_state104_pp0_stage0_iter102 = ~(1'b1 == 1'b1);

assign ap_block_state105_pp0_stage0_iter103 = ~(1'b1 == 1'b1);

assign ap_block_state106_pp0_stage0_iter104 = ~(1'b1 == 1'b1);

assign ap_block_state107_pp0_stage0_iter105 = ~(1'b1 == 1'b1);

assign ap_block_state108_pp0_stage0_iter106 = ~(1'b1 == 1'b1);

assign ap_block_state109_pp0_stage0_iter107 = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state110_pp0_stage0_iter108 = ~(1'b1 == 1'b1);

assign ap_block_state111_pp0_stage0_iter109 = ~(1'b1 == 1'b1);

assign ap_block_state112_pp0_stage0_iter110 = ~(1'b1 == 1'b1);

assign ap_block_state113_pp0_stage0_iter111 = ~(1'b1 == 1'b1);

assign ap_block_state114_pp0_stage0_iter112 = ~(1'b1 == 1'b1);

assign ap_block_state115_pp0_stage0_iter113 = ~(1'b1 == 1'b1);

assign ap_block_state116_pp0_stage0_iter114 = ~(1'b1 == 1'b1);

assign ap_block_state117_pp0_stage0_iter115 = ~(1'b1 == 1'b1);

assign ap_block_state118_pp0_stage0_iter116 = ~(1'b1 == 1'b1);

assign ap_block_state119_pp0_stage0_iter117 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state120_pp0_stage0_iter118 = ~(1'b1 == 1'b1);

assign ap_block_state121_pp0_stage0_iter119 = ~(1'b1 == 1'b1);

assign ap_block_state122_pp0_stage0_iter120 = ~(1'b1 == 1'b1);

assign ap_block_state123_pp0_stage0_iter121 = ~(1'b1 == 1'b1);

assign ap_block_state124_pp0_stage0_iter122 = ~(1'b1 == 1'b1);

assign ap_block_state125_pp0_stage0_iter123 = ~(1'b1 == 1'b1);

assign ap_block_state126_pp0_stage0_iter124 = ~(1'b1 == 1'b1);

assign ap_block_state127_pp0_stage0_iter125 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state128_pp0_stage0_iter126 = ((m_axi_var_output_0_2_V_BVALID == 1'b0) & (tmp_2_reg_231_pp0_iter125_reg == 1'd1));
end

assign ap_block_state12_pp0_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage0_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage0_iter12 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage0_iter13 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage0_iter14 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage0_iter15 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp0_stage0_iter16 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp0_stage0_iter17 = ~(1'b1 == 1'b1);

assign ap_block_state20_pp0_stage0_iter18 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp0_stage0_iter19 = ~(1'b1 == 1'b1);

assign ap_block_state22_pp0_stage0_iter20 = ~(1'b1 == 1'b1);

assign ap_block_state23_pp0_stage0_iter21 = ~(1'b1 == 1'b1);

assign ap_block_state24_pp0_stage0_iter22 = ~(1'b1 == 1'b1);

assign ap_block_state25_pp0_stage0_iter23 = ~(1'b1 == 1'b1);

assign ap_block_state26_pp0_stage0_iter24 = ~(1'b1 == 1'b1);

assign ap_block_state27_pp0_stage0_iter25 = ~(1'b1 == 1'b1);

assign ap_block_state28_pp0_stage0_iter26 = ~(1'b1 == 1'b1);

assign ap_block_state29_pp0_stage0_iter27 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state30_pp0_stage0_iter28 = ~(1'b1 == 1'b1);

assign ap_block_state31_pp0_stage0_iter29 = ~(1'b1 == 1'b1);

assign ap_block_state32_pp0_stage0_iter30 = ~(1'b1 == 1'b1);

assign ap_block_state33_pp0_stage0_iter31 = ~(1'b1 == 1'b1);

assign ap_block_state34_pp0_stage0_iter32 = ~(1'b1 == 1'b1);

assign ap_block_state35_pp0_stage0_iter33 = ~(1'b1 == 1'b1);

assign ap_block_state36_pp0_stage0_iter34 = ~(1'b1 == 1'b1);

assign ap_block_state37_pp0_stage0_iter35 = ~(1'b1 == 1'b1);

assign ap_block_state38_pp0_stage0_iter36 = ~(1'b1 == 1'b1);

assign ap_block_state39_pp0_stage0_iter37 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_io = ((ap_sig_ioackin_m_axi_var_output_0_2_V_AWREADY == 1'b0) & (tmp_2_reg_231 == 1'd1));
end

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state40_pp0_stage0_iter38 = ~(1'b1 == 1'b1);

assign ap_block_state41_pp0_stage0_iter39 = ~(1'b1 == 1'b1);

assign ap_block_state42_pp0_stage0_iter40 = ~(1'b1 == 1'b1);

assign ap_block_state43_pp0_stage0_iter41 = ~(1'b1 == 1'b1);

assign ap_block_state44_pp0_stage0_iter42 = ~(1'b1 == 1'b1);

assign ap_block_state45_pp0_stage0_iter43 = ~(1'b1 == 1'b1);

assign ap_block_state46_pp0_stage0_iter44 = ~(1'b1 == 1'b1);

assign ap_block_state47_pp0_stage0_iter45 = ~(1'b1 == 1'b1);

assign ap_block_state48_pp0_stage0_iter46 = ~(1'b1 == 1'b1);

assign ap_block_state49_pp0_stage0_iter47 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state4_io = ((ap_sig_ioackin_m_axi_var_output_0_2_V_WREADY == 1'b0) & (tmp_2_reg_231_pp0_iter1_reg == 1'd1));
end

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state50_pp0_stage0_iter48 = ~(1'b1 == 1'b1);

assign ap_block_state51_pp0_stage0_iter49 = ~(1'b1 == 1'b1);

assign ap_block_state52_pp0_stage0_iter50 = ~(1'b1 == 1'b1);

assign ap_block_state53_pp0_stage0_iter51 = ~(1'b1 == 1'b1);

assign ap_block_state54_pp0_stage0_iter52 = ~(1'b1 == 1'b1);

assign ap_block_state55_pp0_stage0_iter53 = ~(1'b1 == 1'b1);

assign ap_block_state56_pp0_stage0_iter54 = ~(1'b1 == 1'b1);

assign ap_block_state57_pp0_stage0_iter55 = ~(1'b1 == 1'b1);

assign ap_block_state58_pp0_stage0_iter56 = ~(1'b1 == 1'b1);

assign ap_block_state59_pp0_stage0_iter57 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state60_pp0_stage0_iter58 = ~(1'b1 == 1'b1);

assign ap_block_state61_pp0_stage0_iter59 = ~(1'b1 == 1'b1);

assign ap_block_state62_pp0_stage0_iter60 = ~(1'b1 == 1'b1);

assign ap_block_state63_pp0_stage0_iter61 = ~(1'b1 == 1'b1);

assign ap_block_state64_pp0_stage0_iter62 = ~(1'b1 == 1'b1);

assign ap_block_state65_pp0_stage0_iter63 = ~(1'b1 == 1'b1);

assign ap_block_state66_pp0_stage0_iter64 = ~(1'b1 == 1'b1);

assign ap_block_state67_pp0_stage0_iter65 = ~(1'b1 == 1'b1);

assign ap_block_state68_pp0_stage0_iter66 = ~(1'b1 == 1'b1);

assign ap_block_state69_pp0_stage0_iter67 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state70_pp0_stage0_iter68 = ~(1'b1 == 1'b1);

assign ap_block_state71_pp0_stage0_iter69 = ~(1'b1 == 1'b1);

assign ap_block_state72_pp0_stage0_iter70 = ~(1'b1 == 1'b1);

assign ap_block_state73_pp0_stage0_iter71 = ~(1'b1 == 1'b1);

assign ap_block_state74_pp0_stage0_iter72 = ~(1'b1 == 1'b1);

assign ap_block_state75_pp0_stage0_iter73 = ~(1'b1 == 1'b1);

assign ap_block_state76_pp0_stage0_iter74 = ~(1'b1 == 1'b1);

assign ap_block_state77_pp0_stage0_iter75 = ~(1'b1 == 1'b1);

assign ap_block_state78_pp0_stage0_iter76 = ~(1'b1 == 1'b1);

assign ap_block_state79_pp0_stage0_iter77 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state80_pp0_stage0_iter78 = ~(1'b1 == 1'b1);

assign ap_block_state81_pp0_stage0_iter79 = ~(1'b1 == 1'b1);

assign ap_block_state82_pp0_stage0_iter80 = ~(1'b1 == 1'b1);

assign ap_block_state83_pp0_stage0_iter81 = ~(1'b1 == 1'b1);

assign ap_block_state84_pp0_stage0_iter82 = ~(1'b1 == 1'b1);

assign ap_block_state85_pp0_stage0_iter83 = ~(1'b1 == 1'b1);

assign ap_block_state86_pp0_stage0_iter84 = ~(1'b1 == 1'b1);

assign ap_block_state87_pp0_stage0_iter85 = ~(1'b1 == 1'b1);

assign ap_block_state88_pp0_stage0_iter86 = ~(1'b1 == 1'b1);

assign ap_block_state89_pp0_stage0_iter87 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state90_pp0_stage0_iter88 = ~(1'b1 == 1'b1);

assign ap_block_state91_pp0_stage0_iter89 = ~(1'b1 == 1'b1);

assign ap_block_state92_pp0_stage0_iter90 = ~(1'b1 == 1'b1);

assign ap_block_state93_pp0_stage0_iter91 = ~(1'b1 == 1'b1);

assign ap_block_state94_pp0_stage0_iter92 = ~(1'b1 == 1'b1);

assign ap_block_state95_pp0_stage0_iter93 = ~(1'b1 == 1'b1);

assign ap_block_state96_pp0_stage0_iter94 = ~(1'b1 == 1'b1);

assign ap_block_state97_pp0_stage0_iter95 = ~(1'b1 == 1'b1);

assign ap_block_state98_pp0_stage0_iter96 = ~(1'b1 == 1'b1);

assign ap_block_state99_pp0_stage0_iter97 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_1045 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_2_reg_231 == 1'd1));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign i_1_fu_190_p0 = i_fu_100;

assign i_1_fu_190_p2 = ($signed(i_1_fu_190_p0) + $signed(32'd1));

assign m_axi_var_output_0_2_V_ARADDR = 32'd0;

assign m_axi_var_output_0_2_V_ARBURST = 2'd0;

assign m_axi_var_output_0_2_V_ARCACHE = 4'd0;

assign m_axi_var_output_0_2_V_ARID = 1'd0;

assign m_axi_var_output_0_2_V_ARLEN = 32'd0;

assign m_axi_var_output_0_2_V_ARLOCK = 2'd0;

assign m_axi_var_output_0_2_V_ARPROT = 3'd0;

assign m_axi_var_output_0_2_V_ARQOS = 4'd0;

assign m_axi_var_output_0_2_V_ARREGION = 4'd0;

assign m_axi_var_output_0_2_V_ARSIZE = 3'd0;

assign m_axi_var_output_0_2_V_ARUSER = 1'd0;

assign m_axi_var_output_0_2_V_ARVALID = 1'b0;

assign m_axi_var_output_0_2_V_AWADDR = sum_cast_i_fu_201_p1;

assign m_axi_var_output_0_2_V_AWBURST = 2'd0;

assign m_axi_var_output_0_2_V_AWCACHE = 4'd0;

assign m_axi_var_output_0_2_V_AWID = 1'd0;

assign m_axi_var_output_0_2_V_AWLEN = 32'd1;

assign m_axi_var_output_0_2_V_AWLOCK = 2'd0;

assign m_axi_var_output_0_2_V_AWPROT = 3'd0;

assign m_axi_var_output_0_2_V_AWQOS = 4'd0;

assign m_axi_var_output_0_2_V_AWREGION = 4'd0;

assign m_axi_var_output_0_2_V_AWSIZE = 3'd0;

assign m_axi_var_output_0_2_V_AWUSER = 1'd0;

assign m_axi_var_output_0_2_V_RREADY = 1'b0;

assign m_axi_var_output_0_2_V_WDATA = tmp_V_reg_235_pp0_iter1_reg;

assign m_axi_var_output_0_2_V_WID = 1'd0;

assign m_axi_var_output_0_2_V_WLAST = 1'b0;

assign m_axi_var_output_0_2_V_WSTRB = 64'd18446744073709551615;

assign m_axi_var_output_0_2_V_WUSER = 1'd0;

assign sext_cast_i_fu_160_p1 = tmp_1_fu_150_p4;

assign sum_cast_i_fu_201_p1 = $signed(sum_i_reg_240);

assign sum_i_fu_185_p2 = ($signed(sext_cast_i_reg_223) + $signed(tmp_2_i_i_cast_i_fu_177_p1));

assign tmp_1_fu_150_p4 = {{var_output_0_2_V_offset_dout[31:6]}};

assign tmp_2_i_i_cast_i_fu_177_p0 = i_fu_100;

assign tmp_2_i_i_cast_i_fu_177_p1 = tmp_2_i_i_cast_i_fu_177_p0;

assign tmp_2_nbreadreq_fu_116_p3 = output_stream_0_2_V_V_empty_n;

assign tmp_fu_146_p1 = coalesced_data_num_dout[31:0];

assign tmp_i_i_i_fu_172_p0 = i_fu_100;

assign tmp_i_i_i_fu_172_p2 = (($signed(tmp_i_i_i_fu_172_p0) < $signed(tmp_reg_218)) ? 1'b1 : 1'b0);

always @ (posedge ap_clk) begin
    sext_cast_i_reg_223[32:26] <= 7'b0000000;
end

endmodule //jacobi2d_kernel_store40
